<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.makeworld.gq/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.makeworld.gq/" rel="alternate" type="text/html" /><updated>2021-01-22T12:33:19-05:00</updated><id>https://www.makeworld.gq/feed.xml</id><title type="html">www.makeworld.gq</title><subtitle>makeworld's website.</subtitle><entry><title type="html">Introduction to Go Modules</title><link href="https://www.makeworld.gq/2020/11/go_modules.html" rel="alternate" type="text/html" title="Introduction to Go Modules" /><published>2020-11-13T00:00:00-05:00</published><updated>2020-11-13T00:00:00-05:00</updated><id>https://www.makeworld.gq/2020/11/go_modules</id><content type="html" xml:base="https://www.makeworld.gq/2020/11/go_modules.html">&lt;p&gt;I’ve seen many people online talk about liking &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; and using it, but being confused by its dependency system,
called Go modules. This blog post aims to provide a simple introduction with examples. It focuses mostly
on Unix-based systems like Linux and macOS over Windows.&lt;/p&gt;

&lt;p&gt;This post does not cover all possible ways of using Go modules. It’s just a simple introduction with the most
common use cases.&lt;/p&gt;

&lt;h2 id=&quot;background-knowledge&quot;&gt;Background knowledge&lt;/h2&gt;

&lt;p&gt;You should know about &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;. Pretty much all Go modules are expected
to follow it, and it will help you when upgrading modules or releasing your own.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I assume you already have Go installed. Go modules have preliminary support since Go 1.11, but Go module
support improves with with each release. I’d recommend installing at least Go 1.13, but install the 
latest version if you can.&lt;/p&gt;

&lt;p&gt;To begin the setup, you need to be aware of some environment variables. By default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPATH&lt;/code&gt; is set to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOBIN&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go/bin&lt;/code&gt;. I would not recommend changing this. There is also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOMODCACHE&lt;/code&gt;
(added in Go 1.15) which defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPATH[0]/pkg/mod&lt;/code&gt;, which would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go/pkg/mod&lt;/code&gt; if you don’t
change any variables. It holds the cache of modules you’ve downloaded.&lt;/p&gt;

&lt;p&gt;There is one other variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GO111MODULE&lt;/code&gt;. This variable controls whether Go modules are enabled
and being used to manage dependencies. If it’s set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt;, you should be good. If it’s
set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;off&lt;/code&gt;, then you must change it. If you’re using a Go version earlier than
1.13, you must set it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on&lt;/code&gt;, as the older &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto&lt;/code&gt; behavior is not appropriate for this tutorial.&lt;/p&gt;

&lt;p&gt;To check your current setup, you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go env&lt;/code&gt; and see all the variables Go is working with.&lt;/p&gt;

&lt;h2 id=&quot;theory&quot;&gt;Theory&lt;/h2&gt;

&lt;p&gt;You can skip this section if you just want to start using Go modules. But this might be helpful for
people coming from other languages like Python or Rust.&lt;/p&gt;

&lt;p&gt;Most programming languages handle dependencies by having a official registry/repository of packages
that users can upload to. Think of PyPI, CPAN, NPM, crates.io, and more. Go takes a much more
decentralized approach. Modules can exist anywhere on the Web, and they are defined with an HTTP(S)
path.&lt;/p&gt;

&lt;p&gt;For example, a valid module path would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/username/repo&lt;/code&gt;. It could also be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mydomain.com/foo&lt;/code&gt;.
In either case, to download the module Go will first try to download from a proxy (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GOPROXY&lt;/code&gt;), and then
fallback to looking at the HTML of the URL provided to find where the code lives. For more info on this
process and the HTML required, you can read more &lt;a href=&quot;https://golang.org/ref/mod#vcs&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will not need to bother with any of this for most Git hosting providers. GitHub, Gitlab, Gitea, etc.,
will all create the needed HTML for you, and you can just specify a module path like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/username/repo&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-module&quot;&gt;Creating a module&lt;/h2&gt;

&lt;p&gt;First, your module needs a folder. To keep things simple, the path to this folder should double as its module
path. So if you’re using GitHub, your username is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;, and your project is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;, your project should
live at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$GOPATH/src/github.com/user/foo&lt;/code&gt;, which by default will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/go/src/github.com/user/foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then go into your project folder and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod init&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/user/foo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/github.com/user/foo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go mod init
go: creating new go.mod: module github.com/user/foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re really against this layout, you’re welcome to create your projects anywhere.
The only difference for this entire tutorial is that you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod init&lt;/code&gt; differently. You will have to specify
the module path, since Go can’t infer it.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go mod init github.com/user/foo
go: creating new go.mod: module github.com/user/foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod init&lt;/code&gt; will create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file in the project folder. This is how Go declares its dependencies –
with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file, and also a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.sum&lt;/code&gt; file that we’ll see later. You should always be uploading these files
with the rest of your code.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;go.mod
module github.com/user/foo

go 1.15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Besides declaring your dependencies, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file also tells Go that this project really is a module, and gives
it its path.&lt;/p&gt;

&lt;p&gt;Most of the time you shouldn’t need to edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.sum&lt;/code&gt; by hand. Instead you should let it be
changed by running commands.&lt;/p&gt;

&lt;h2 id=&quot;adding-dependencies&quot;&gt;Adding dependencies&lt;/h2&gt;

&lt;p&gt;Alright, now you have a project, presumably with some code, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file. Time to add some dependencies.
The main commands for that are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod tidy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; to add dependencies. Here are some examples:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get github.com/bar/baz         &lt;span class=&quot;c&quot;&gt;# Latest version&lt;/span&gt;
go get github.com/bar/baz@master  &lt;span class=&quot;c&quot;&gt;# Latest commit on master&lt;/span&gt;
go get github.com/bar/baz@e0ffd3a &lt;span class=&quot;c&quot;&gt;# The module at commit e0ffd3a&lt;/span&gt;
go get github.com/bar/baz@v1.2.3  &lt;span class=&quot;c&quot;&gt;# Version 1.2.3 (using git tags)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; accepts some other flags that I don’t need to cover here. One flag to avoid is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u&lt;/code&gt;, as it updates all the
downstream dependencies of a module (not changing a major version), which could cause breakage.&lt;/p&gt;

&lt;p&gt;My suggestion would be to use the commit or tag syntax as much as possible, so that you know explicitly what version of
dependencies you’re adding, and to not use any flags.&lt;/p&gt;

&lt;p&gt;The other important command after adding dependencies is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod tidy&lt;/code&gt;. This command cleans up your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.sum&lt;/code&gt;
files, removing unused entries and adding missing ones. It’s good to run this right after adding a dependency, and before
committing your code. You can run this command multiple times without any worry, if everything is in order than it will
just change nothing.&lt;/p&gt;

&lt;p&gt;You can now use the dependency you added in your code, using the module path.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;github.com/bar/baz&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dependencies-beyond-v1&quot;&gt;Dependencies beyond v1&lt;/h2&gt;

&lt;p&gt;This is the part that gets a bit trickier. In Go, the module path changes with every major version update. So the path
for v1.0.0 of baz, all the way to v1.99.99 of baz is still &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/bar/baz&lt;/code&gt;. But once baz v2.0.0 is released, the
module path is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com/bar/baz/v2&lt;/code&gt;. Note that’s not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@v2&lt;/code&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This happens because major versions are supposed to represent breaking changes. So it’s important to allow your project
to be able to use v2, while one of your dependencies still uses v1. This is achieved by making the module paths different.&lt;/p&gt;

&lt;p&gt;The only changes you need to make is to use a slightly different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; command, and to update your code import paths.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get github.com/bar/baz/v2         &lt;span class=&quot;c&quot;&gt;# Latest version of v2&lt;/span&gt;
go get github.com/bar/baz/v2@e0ffd3a &lt;span class=&quot;c&quot;&gt;# The module at commit e0ffd3a (must be a commit after v2 release)&lt;/span&gt;
go get github.com/bar/baz/v2@v2.2.3  &lt;span class=&quot;c&quot;&gt;# A specific v2 version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;github.com/bar/baz/v2&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Uses the new path&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Module name is still 'baz', not 'v2' or something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;publishing-a-module&quot;&gt;Publishing a module&lt;/h2&gt;

&lt;p&gt;The simplest way to publish a module is to use git, and a git host. Examples include GitHub, Gitlab, sr.ht, etc. Upload
your Go code there, and make sure it has at least a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file. Now anyone can use it as a module!&lt;/p&gt;

&lt;p&gt;You should probably have versioning though, and you can do that with git tags, or by using the releasing system on your
git host. For example, on GitHub you can click the Releases tab, and then “Draft a new release”.&lt;/p&gt;

&lt;p&gt;Doing simple tags with git is pretty easy as well:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag v1.2.3  &lt;span class=&quot;c&quot;&gt;# Whatever version this commit is&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure your release name follows &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;, and starts with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;!&lt;/p&gt;

&lt;h2 id=&quot;major-version-updates-to-your-module&quot;&gt;Major version updates to your module&lt;/h2&gt;

&lt;p&gt;So, you’ve been working on a v1 module for a while, but now you need to make a breaking change. This means you need to
release a new major version.&lt;/p&gt;

&lt;p&gt;Keep in mind, this is not required from v0 to v1, read about &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;
to know why. But if you’re already on v1 and want to make a breaking change, then read on.&lt;/p&gt;

&lt;p&gt;There are a couple different ways to do this. Assuming you don’t need compatibility with Go versions older than 1.9.7 or 1.10.3,
than this method should work fine. If you do, you can read more &lt;a href=&quot;https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;1. Update your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go.mod&lt;/code&gt; file to include a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2&lt;/code&gt; at the end of the module path.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;go.mod
module github.com/user/foo/v2

go 1.15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2. Update all your internal import statements to use the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2&lt;/code&gt; path. Anytime you import your own module in your code, you need
to update that import.&lt;/p&gt;

&lt;p&gt;3. Commit, push, tag, push tag.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Commit and push, and then...&lt;/span&gt;
git tag v2.0.0
git push &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;

&lt;p&gt;The Go blog has a series on using Go modules, here’s the &lt;a href=&quot;https://blog.golang.org/using-go-modules&quot;&gt;first post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The official Go Wiki has a &lt;a href=&quot;https://github.com/golang/go/wiki/Modules&quot;&gt;page on Modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also an official &lt;a href=&quot;https://golang.org/ref/mod&quot;&gt;technical reference&lt;/a&gt;, which should be considered the definitive/primary
source for any info. It applies to Go 1.15 and later.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve seen many people online talk about liking Go and using it, but being confused by its dependency system, called Go modules. This blog post aims to provide a simple introduction with examples. It focuses mostly on Unix-based systems like Linux and macOS over Windows.</summary></entry></feed>